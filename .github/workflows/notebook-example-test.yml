name: Notebook Examples Tests (JupyterHub Image odc-odp-workspace-python:2025.3.21)

on:
  #schedule:
  #  - cron: "0 6 * * *"  # every day at 6 AM
  pull_request:
    branches:
     - master
permissions:
  contents: read
  issues: write

jobs:
  fetch-variable:
    runs-on: ubuntu-latest
    outputs:
      notebookImage: ${{ steps.extract.outputs.notebookImage }}
      notebookImageTag: ${{ steps.extract.outputs.notebookImageTag }}
    steps:
      # Checkout the other repo (repo-1)
      - name: Checkout infrastructure
        uses: actions/checkout@v4
        with:
          repository: C4IROcean/infrastructure   # Replace with actual org/repo
          ref: main                     # Or specify a branch/tag
          path: infrastructure
          token: ${{ secrets.GITHUB_TOKEN }} # Or PAT if cross-org

      # Extract notebookImageTag from file
      - name: Extract notebookImageTag value
        id: extract
        run: |
          image=$(grep 'notebookImage' infrastructure/20-PLATFORM/workspaces.tf | cut -d'"' -f2)
          tag=$(grep 'notebookImageTag' infrastructure/20-PLATFORM/workspaces.tf | cut -d'"' -f2)
          echo "notebookImage=$image" >> $GITHUB_OUTPUT
          echo "notebookImageTag=$tag" >> $GITHUB_OUTPUT
                  
     
  test-notebooks:
    name: Run nbval tests inside JupyterHub Docker image
    needs: fetch-variable
    runs-on: ubuntu-latest

    #note: we are not using the most recent image , hope it will be automatic in the future
    container:
      image: oceandata.azurecr.io/${{ needs.fetch-tag.outputs.notebookImage}}:${{ needs.fetch-tag.outputs.notebookImageTag }}
      options: --user root
      credentials:
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
      env:
        ODP_API_KEY: ${{ secrets.MY_ODP_API_KEY }}

    steps:

      - name: Checkout OceanDataConnector repo
        uses: actions/checkout@v3
        with:
          repository: C4IROcean/OceanDataConnector

          path: ocean-data-connector

      - name: Copy dataset-examples to notebooks
        run: |
          cp -r ocean-data-connector/dataset-examples/ ./dataset-examples
          ls -R ./dataset-examples
          
      - name: Install nbval (if not already in image)
        run: |
          pip install pytest nbval

      - name: Inject conftest.py for API key patch
        run: |
          cat << 'EOF' > dataset-examples/conftest.py
          # conftest.py
          import os
          # Get the absolute path to the directory containing this conftest.py
          # This makes the solution portable.
          current_dir = os.path.dirname(os.path.abspath(__file__))
          
          # Set the PYTHONSTARTUP environment variable.
          # When any new Python interpreter starts (including the nbval kernel),
          # it will automatically execute the my_patcher.py file.
          os.environ['PYTHONSTARTUP'] = os.path.join(current_dir, 'my_patcher.py')
          
          print(f"\n[conftest.py] Set PYTHONSTARTUP to: {os.environ['PYTHONSTARTUP']}", flush=True)
          print("[conftest.py] Any new kernel should now load the patch automatically.", flush=True)
          EOF

      - name: Inject my_patcher.py for API key patch
        run: |
          cat << 'EOF' > dataset-examples/my_patcher.py
          # my_patcher.py
          import os
          from unittest.mock import patch
          
          # This is the original class we want to patch.
          from odp.client import OdpClient
          
          print("[my_patcher.py] This patcher module has been imported.", flush=True)
          
          # --- The Patched Class ---
          class PatchedOdpClient(OdpClient):
              def __init__(self, **data):
                  api_key = os.getenv("ODP_API_KEY")
                  print("\n--------------------------", flush=True)
                  print("--- ODP CLIENT PATCHED ---", flush=True)
                  print(f"Injected API key: {api_key}", flush=True)
                  print("--------------------------\n", flush=True)
                  
                  data["api_key"] = api_key
                  super().__init__(**data)
          
          # --- The Patching Mechanism ---
          # We create the patcher object.
          patcher = patch('odp.client.OdpClient', PatchedOdpClient)
          
          # We start the patch IMMEDIATELY when this file is imported.
          patcher.start()
          print("[my_patcher.py] Global patch is now active.", flush=True)
          EOF
      
      - name: Run Notebook Tests with nbval
        run: |
          #pytest -s -v --nbval-lax dataset-examples/ProtectedSeas_data.ipynb
          pytest -s -v --nbval-lax dataset-examples/*.ipynb 
       
      - name: Create GitHub issue if notebook tests failed
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = "Notebook tests failed in CI";
            const body = `One or more notebooks failed nbval tests.
            Check run: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            // Check if an issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open"
            });
            
            if (!issues.data.find(issue => issue.title === title)) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ["bug", "test-failure"]
              });
            } else {
              core.info("Issue already exists, skipping creation");
            }

      #- name: Run notebook tests with nbval-lax
      #  run: |
      #    pytest --nbval-lax ./dataset-examples/*.ipynb 

      - name: Send failure message to Slack
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"‚ùå GitHub Actions notebook-example-test Failed in repo *'"${GITHUB_REPOSITORY}"'*. Check details: '"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"'"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
