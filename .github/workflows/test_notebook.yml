name: Docker Image CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            oceandata.azurecr.io/odc-example-notebooks-testrunner
          flavor: |
            latest=true
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - uses: azure/docker-login@v1
        with:
          login-server: oceandata.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - uses: actions/checkout@v3
      - name: Build and push the docker image
        uses: docker/build-push-action@v2
        env:
          DOCKER_BUILDKIT: 1
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


  run_tests_obis-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for obis-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/OBIS/OBIS.ipynb)"

  run_tests_obis-checkpoint-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for obis-checkpoint-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/OBIS/.ipynb_checkpoints/OBIS-checkpoint.ipynb)"

  run_tests_marineregions-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for marineregions-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/SDK/ExampleNotebooks/MarineRegions.ipynb)"

  run_tests_marineregions-checkpoint-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for marineregions-checkpoint-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/Marine Regions/.ipynb_checkpoints/MarineRegions-checkpoint.ipynb)"

  run_tests_worms-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for worms-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/Worms/WoRMS.ipynb)"

  run_tests_lusedata-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for lusedata-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/lusedata/Lusedata.ipynb)"

  run_tests_lusedata-checkpoint-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for lusedata-checkpoint-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/lusedata/.ipynb_checkpoints/Lusedata-checkpoint.ipynb)"

  run_tests_gebco-bathymetry-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for gebco-bathymetry-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/GEBCO Bathymetry/GEBCO Bathymetry.ipynb)"

  run_tests_tutorial-3-hourly-ship-emissions-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for tutorial-3-hourly-ship-emissions-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/VesselEmissions/Tutorial 3 - Hourly Ship Emissions.ipynb)"

  run_tests_tutorial-4-green-corridor-emissions-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for tutorial-4-green-corridor-emissions-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/VesselEmissions/Tutorial 4 - Green Corridor Emissions.ipynb)"

  run_tests_tutorial-1-gridded-emissions-data-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for tutorial-1-gridded-emissions-data-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/VesselEmissions/Tutorial 1 - Gridded Emissions Data.ipynb)"

  run_tests_tutorial-2-voyage-emissions-data-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for tutorial-2-voyage-emissions-data-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/VesselEmissions/Tutorial 2 - Voyage Emissions Data.ipynb)"

  run_tests_worldoceandatabase-selector-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for worldoceandatabase-selector-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/World Ocean Database/WorldOceanDatabase_selector.ipynb)"

  run_tests_worldoceandatabase-functions-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for worldoceandatabase-functions-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/World Ocean Database/WorldOceanDatabase_functions.ipynb)"

  run_tests_worldoceandatabase-selector-checkpoint-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for worldoceandatabase-selector-checkpoint-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/World Ocean Database/.ipynb_checkpoints/WorldOceanDatabase_selector-checkpoint.ipynb)"

  run_tests_worldoceanatlas-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for worldoceanatlas-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/World Ocean Atlas/WorldOceanAtlas.ipynb)"

  run_tests_wids-crw-bleaching-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for wids-crw-bleaching-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/NOAA Coral Reef Watch/WiDS/WiDS_CRW_bleaching.ipynb)"

  run_tests_timeseries-classification-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for timeseries-classification-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/NOAA Coral Reef Watch/WiDS/timeseries_classification.ipynb)"

  run_tests_wids-classification-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for wids-classification-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/NOAA Coral Reef Watch/WiDS/WiDS_classification.ipynb)"

  run_tests_wids-crw-bleaching-checkpoint-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for wids-crw-bleaching-checkpoint-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/NOAA Coral Reef Watch/WiDS/.ipynb_checkpoints/WiDS_CRW_bleaching-checkpoint.ipynb)"

  run_tests_vesselemssions-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for vesselemssions-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/data/GlobalVesselEmissions/VesselEmssions.ipynb)"

  run_tests_simulator-comparing-emissions-ipynb:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests for simulator-comparing-emissions-ipynb
        run:
          docker run -e "DATABASE_URL=${{ secrets.ODC_DATABASE_URL }}" -e
          "ODE_CONNECTION_STR=${{ secrets.ODE_CONNECTION_STR }}" -e
          "ODE_MAPBOX_API_TOKEN=${{ secrets.ODE_MAPBOX_API_TOKEN }}" local nox -s  "test_notebook-3.9(notebook_file=/src/Data Products/Simulator, Comparing Emissions.ipynb)"
